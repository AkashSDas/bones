/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Bones
 * OpenAPI spec version: 1.0.0
 */
import * as axios from "axios";
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
    GetApiV1IamPermission200,
    GetApiV1IamPermission400,
    GetApiV1IamPermission401,
    GetApiV1IamPermission403,
    GetApiV1IamPermission500,
    GetApiV1IamPermissionParams,
    GetApiV1IamPermissionPermissionId200,
    GetApiV1IamPermissionPermissionId400,
    GetApiV1IamPermissionPermissionId401,
    GetApiV1IamPermissionPermissionId403,
    GetApiV1IamPermissionPermissionId500,
    PatchApiV1IamPermissionPermissionId200,
    PatchApiV1IamPermissionPermissionId400,
    PatchApiV1IamPermissionPermissionId401,
    PatchApiV1IamPermissionPermissionId403,
    PatchApiV1IamPermissionPermissionId500,
    PatchApiV1IamPermissionPermissionIdBody,
} from "../../schemas";

export const getApiV1IamPermission = (
    params?: GetApiV1IamPermissionParams,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1IamPermission200>> => {
    return axios.default.get(`http://localhost:8000/api/v1/iam-permission`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetApiV1IamPermissionQueryKey = (
    params?: GetApiV1IamPermissionParams,
) => {
    return [
        `http://localhost:8000/api/v1/iam-permission`,
        ...(params ? [params] : []),
    ] as const;
};

export const getGetApiV1IamPermissionQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamPermission>>,
    TError = AxiosError<
        | GetApiV1IamPermission400
        | GetApiV1IamPermission401
        | GetApiV1IamPermission403
        | GetApiV1IamPermission500
    >,
>(
    params?: GetApiV1IamPermissionParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermission>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiV1IamPermissionQueryKey(params);

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1IamPermission>>> = ({
        signal,
    }) => getApiV1IamPermission(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, staleTime: 600000, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamPermission>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamPermissionQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamPermission>>
>;
export type GetApiV1IamPermissionQueryError = AxiosError<
    | GetApiV1IamPermission400
    | GetApiV1IamPermission401
    | GetApiV1IamPermission403
    | GetApiV1IamPermission500
>;

export function useGetApiV1IamPermission<
    TData = Awaited<ReturnType<typeof getApiV1IamPermission>>,
    TError = AxiosError<
        | GetApiV1IamPermission400
        | GetApiV1IamPermission401
        | GetApiV1IamPermission403
        | GetApiV1IamPermission500
    >,
>(
    params: undefined | GetApiV1IamPermissionParams,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermission>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiV1IamPermission>>,
                    TError,
                    TData
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamPermission<
    TData = Awaited<ReturnType<typeof getApiV1IamPermission>>,
    TError = AxiosError<
        | GetApiV1IamPermission400
        | GetApiV1IamPermission401
        | GetApiV1IamPermission403
        | GetApiV1IamPermission500
    >,
>(
    params?: GetApiV1IamPermissionParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermission>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiV1IamPermission>>,
                    TError,
                    TData
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamPermission<
    TData = Awaited<ReturnType<typeof getApiV1IamPermission>>,
    TError = AxiosError<
        | GetApiV1IamPermission400
        | GetApiV1IamPermission401
        | GetApiV1IamPermission403
        | GetApiV1IamPermission500
    >,
>(
    params?: GetApiV1IamPermissionParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermission>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamPermission<
    TData = Awaited<ReturnType<typeof getApiV1IamPermission>>,
    TError = AxiosError<
        | GetApiV1IamPermission400
        | GetApiV1IamPermission401
        | GetApiV1IamPermission403
        | GetApiV1IamPermission500
    >,
>(
    params?: GetApiV1IamPermissionParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermission>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamPermissionQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const patchApiV1IamPermissionPermissionId = (
    permissionId: string,
    patchApiV1IamPermissionPermissionIdBody: PatchApiV1IamPermissionPermissionIdBody,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<PatchApiV1IamPermissionPermissionId200>> => {
    return axios.default.patch(
        `http://localhost:8000/api/v1/iam-permission/${permissionId}`,
        patchApiV1IamPermissionPermissionIdBody,
        options,
    );
};

export const getPatchApiV1IamPermissionPermissionIdMutationOptions = <
    TError = AxiosError<
        | PatchApiV1IamPermissionPermissionId400
        | PatchApiV1IamPermissionPermissionId401
        | PatchApiV1IamPermissionPermissionId403
        | PatchApiV1IamPermissionPermissionId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchApiV1IamPermissionPermissionId>>,
        TError,
        { permissionId: string; data: PatchApiV1IamPermissionPermissionIdBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof patchApiV1IamPermissionPermissionId>>,
    TError,
    { permissionId: string; data: PatchApiV1IamPermissionPermissionIdBody },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof patchApiV1IamPermissionPermissionId>>,
        { permissionId: string; data: PatchApiV1IamPermissionPermissionIdBody }
    > = (props) => {
        const { permissionId, data } = props ?? {};

        return patchApiV1IamPermissionPermissionId(permissionId, data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PatchApiV1IamPermissionPermissionIdMutationResult = NonNullable<
    Awaited<ReturnType<typeof patchApiV1IamPermissionPermissionId>>
>;
export type PatchApiV1IamPermissionPermissionIdMutationBody =
    PatchApiV1IamPermissionPermissionIdBody;
export type PatchApiV1IamPermissionPermissionIdMutationError = AxiosError<
    | PatchApiV1IamPermissionPermissionId400
    | PatchApiV1IamPermissionPermissionId401
    | PatchApiV1IamPermissionPermissionId403
    | PatchApiV1IamPermissionPermissionId500
>;

export const usePatchApiV1IamPermissionPermissionId = <
    TError = AxiosError<
        | PatchApiV1IamPermissionPermissionId400
        | PatchApiV1IamPermissionPermissionId401
        | PatchApiV1IamPermissionPermissionId403
        | PatchApiV1IamPermissionPermissionId500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof patchApiV1IamPermissionPermissionId>>,
        TError,
        { permissionId: string; data: PatchApiV1IamPermissionPermissionIdBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof patchApiV1IamPermissionPermissionId>>,
    TError,
    { permissionId: string; data: PatchApiV1IamPermissionPermissionIdBody },
    TContext
> => {
    const mutationOptions =
        getPatchApiV1IamPermissionPermissionIdMutationOptions(options);

    return useMutation(mutationOptions);
};
export const getApiV1IamPermissionPermissionId = (
    permissionId: string,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1IamPermissionPermissionId200>> => {
    return axios.default.get(
        `http://localhost:8000/api/v1/iam-permission/${permissionId}`,
        options,
    );
};

export const getGetApiV1IamPermissionPermissionIdQueryKey = (permissionId: string) => {
    return [`http://localhost:8000/api/v1/iam-permission/${permissionId}`] as const;
};

export const getGetApiV1IamPermissionPermissionIdQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
    TError = AxiosError<
        | GetApiV1IamPermissionPermissionId400
        | GetApiV1IamPermissionPermissionId401
        | GetApiV1IamPermissionPermissionId403
        | GetApiV1IamPermissionPermissionId500
    >,
>(
    permissionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiV1IamPermissionPermissionIdQueryKey(permissionId);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>
    > = ({ signal }) =>
        getApiV1IamPermissionPermissionId(permissionId, { signal, ...axiosOptions });

    return {
        queryKey,
        queryFn,
        enabled: !!permissionId,
        staleTime: 600000,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamPermissionPermissionIdQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>
>;
export type GetApiV1IamPermissionPermissionIdQueryError = AxiosError<
    | GetApiV1IamPermissionPermissionId400
    | GetApiV1IamPermissionPermissionId401
    | GetApiV1IamPermissionPermissionId403
    | GetApiV1IamPermissionPermissionId500
>;

export function useGetApiV1IamPermissionPermissionId<
    TData = Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
    TError = AxiosError<
        | GetApiV1IamPermissionPermissionId400
        | GetApiV1IamPermissionPermissionId401
        | GetApiV1IamPermissionPermissionId403
        | GetApiV1IamPermissionPermissionId500
    >,
>(
    permissionId: string,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
                    TError,
                    TData
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamPermissionPermissionId<
    TData = Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
    TError = AxiosError<
        | GetApiV1IamPermissionPermissionId400
        | GetApiV1IamPermissionPermissionId401
        | GetApiV1IamPermissionPermissionId403
        | GetApiV1IamPermissionPermissionId500
    >,
>(
    permissionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
                    TError,
                    TData
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamPermissionPermissionId<
    TData = Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
    TError = AxiosError<
        | GetApiV1IamPermissionPermissionId400
        | GetApiV1IamPermissionPermissionId401
        | GetApiV1IamPermissionPermissionId403
        | GetApiV1IamPermissionPermissionId500
    >,
>(
    permissionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamPermissionPermissionId<
    TData = Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
    TError = AxiosError<
        | GetApiV1IamPermissionPermissionId400
        | GetApiV1IamPermissionPermissionId401
        | GetApiV1IamPermissionPermissionId403
        | GetApiV1IamPermissionPermissionId500
    >,
>(
    permissionId: string,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamPermissionPermissionId>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamPermissionPermissionIdQueryOptions(
        permissionId,
        options,
    );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
