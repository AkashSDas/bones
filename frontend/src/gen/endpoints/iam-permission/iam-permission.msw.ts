/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Bones
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type {
    GetApiV1IamPermission200,
    GetApiV1IamPermissionPermissionId200,
    PatchApiV1IamPermissionPermissionId200,
} from "../../schemas";

export const getGetApiV1IamPermissionResponseMock = (
    overrideResponse: Partial<GetApiV1IamPermission200> = {},
): GetApiV1IamPermission200 => ({
    permissions: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
    ).map(() => ({
        createdAt: faker.word.sample(),
        isServiceWide: faker.datatype.boolean(),
        name: faker.word.sample(),
        permissionId: faker.string.uuid(),
        readAll: faker.datatype.boolean(),
        serviceType: faker.helpers.arrayElement(["iam", "workspace"] as const),
        updatedAt: faker.word.sample(),
        users: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
        ).map(() => ({
            accessType: faker.helpers.arrayElement(["read", "write"] as const),
            createdAt: faker.word.sample(),
            isBlocked: faker.datatype.boolean(),
            lastLoggedInAt: faker.word.sample(),
            passwordAge: faker.word.sample(),
            updatedAt: faker.word.sample(),
            userId: faker.string.uuid(),
            username: faker.word.sample(),
        })),
        writeAll: faker.datatype.boolean(),
    })),
    total: faker.number.int({ min: 0, max: undefined }),
    ...overrideResponse,
});

export const getPatchApiV1IamPermissionPermissionIdResponseMock = (
    overrideResponse: Partial<PatchApiV1IamPermissionPermissionId200> = {},
): PatchApiV1IamPermissionPermissionId200 => ({
    permission: {
        createdAt: faker.word.sample(),
        isServiceWide: faker.datatype.boolean(),
        name: faker.word.sample(),
        permissionId: faker.string.uuid(),
        readAll: faker.datatype.boolean(),
        serviceType: faker.helpers.arrayElement(["iam", "workspace"] as const),
        updatedAt: faker.word.sample(),
        users: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
        ).map(() => ({
            createdAt: faker.word.sample(),
            isBlocked: faker.datatype.boolean(),
            lastLoggedInAt: faker.word.sample(),
            passwordAge: faker.word.sample(),
            updatedAt: faker.word.sample(),
            userId: faker.string.uuid(),
            username: faker.word.sample(),
        })),
        writeAll: faker.datatype.boolean(),
    },
    ...overrideResponse,
});

export const getGetApiV1IamPermissionPermissionIdResponseMock = (
    overrideResponse: Partial<GetApiV1IamPermissionPermissionId200> = {},
): GetApiV1IamPermissionPermissionId200 => ({
    permission: {
        createdAt: faker.word.sample(),
        isServiceWide: faker.datatype.boolean(),
        name: faker.word.sample(),
        permissionId: faker.string.uuid(),
        readAll: faker.datatype.boolean(),
        serviceType: faker.helpers.arrayElement(["iam", "workspace"] as const),
        updatedAt: faker.word.sample(),
        users: Array.from(
            { length: faker.number.int({ min: 1, max: 10 }) },
            (_, i) => i + 1,
        ).map(() => ({
            accessType: faker.helpers.arrayElement(["read", "write"] as const),
            createdAt: faker.word.sample(),
            isBlocked: faker.datatype.boolean(),
            lastLoggedInAt: faker.word.sample(),
            passwordAge: faker.word.sample(),
            updatedAt: faker.word.sample(),
            userId: faker.string.uuid(),
            username: faker.word.sample(),
        })),
        writeAll: faker.datatype.boolean(),
    },
    ...overrideResponse,
});

export const getGetApiV1IamPermissionMockHandler = (
    overrideResponse?:
        | GetApiV1IamPermission200
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0],
          ) => Promise<GetApiV1IamPermission200> | GetApiV1IamPermission200),
) => {
    return http.get("*/api/v1/iam-permission", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetApiV1IamPermissionResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getPatchApiV1IamPermissionPermissionIdMockHandler = (
    overrideResponse?:
        | PatchApiV1IamPermissionPermissionId200
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0],
          ) =>
              | Promise<PatchApiV1IamPermissionPermissionId200>
              | PatchApiV1IamPermissionPermissionId200),
) => {
    return http.patch("*/api/v1/iam-permission/:permissionId", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPatchApiV1IamPermissionPermissionIdResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getGetApiV1IamPermissionPermissionIdMockHandler = (
    overrideResponse?:
        | GetApiV1IamPermissionPermissionId200
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0],
          ) =>
              | Promise<GetApiV1IamPermissionPermissionId200>
              | GetApiV1IamPermissionPermissionId200),
) => {
    return http.get("*/api/v1/iam-permission/:permissionId", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetApiV1IamPermissionPermissionIdResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};
export const getIamPermissionMock = () => [
    getGetApiV1IamPermissionMockHandler(),
    getPatchApiV1IamPermissionPermissionIdMockHandler(),
    getGetApiV1IamPermissionPermissionIdMockHandler(),
];
