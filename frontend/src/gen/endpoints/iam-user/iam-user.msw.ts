/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Bones
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type {
    GetApiV1IamUser200,
    GetApiV1IamUserExists200,
    GetApiV1IamUserUserId200,
    PatchApiV1IamUserUserId200,
    PostApiV1IamUser201,
    PostApiV1IamUserLogin200,
} from "../../schemas";

export const getPostApiV1IamUserResponseMock = (
    overrideResponse: Partial<PostApiV1IamUser201> = {},
): PostApiV1IamUser201 => ({
    generatedPassword: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    user: {
        createdAt: faker.word.sample(),
        isBlocked: faker.datatype.boolean(),
        lastLoggedInAt: faker.word.sample(),
        passwordAge: faker.word.sample(),
        updatedAt: faker.word.sample(),
        userId: faker.string.uuid(),
        username: faker.word.sample(),
    },
    ...overrideResponse,
});

export const getGetApiV1IamUserResponseMock = (
    overrideResponse: Partial<GetApiV1IamUser200> = {},
): GetApiV1IamUser200 => ({
    total: faker.number.int({ min: 0, max: undefined }),
    users: Array.from(
        { length: faker.number.int({ min: 1, max: 10 }) },
        (_, i) => i + 1,
    ).map(() => ({
        createdAt: faker.word.sample(),
        isBlocked: faker.datatype.boolean(),
        lastLoggedInAt: faker.word.sample(),
        passwordAge: faker.word.sample(),
        updatedAt: faker.word.sample(),
        userId: faker.string.uuid(),
        username: faker.word.sample(),
    })),
    ...overrideResponse,
});

export const getPatchApiV1IamUserUserIdResponseMock = (
    overrideResponse: Partial<PatchApiV1IamUserUserId200> = {},
): PatchApiV1IamUserUserId200 => ({
    generatedPassword: faker.helpers.arrayElement([faker.word.sample(), undefined]),
    message: faker.word.sample(),
    ...overrideResponse,
});

export const getGetApiV1IamUserUserIdResponseMock = (
    overrideResponse: Partial<GetApiV1IamUserUserId200> = {},
): GetApiV1IamUserUserId200 => ({
    user: {
        createdAt: faker.word.sample(),
        isBlocked: faker.datatype.boolean(),
        lastLoggedInAt: faker.word.sample(),
        passwordAge: faker.word.sample(),
        updatedAt: faker.word.sample(),
        userId: faker.string.uuid(),
        username: faker.word.sample(),
    },
    ...overrideResponse,
});

export const getGetApiV1IamUserExistsResponseMock = (
    overrideResponse: Partial<GetApiV1IamUserExists200> = {},
): GetApiV1IamUserExists200 => ({
    exists: faker.datatype.boolean(),
    ...overrideResponse,
});

export const getPostApiV1IamUserLoginResponseMock = (
    overrideResponse: Partial<PostApiV1IamUserLogin200> = {},
): PostApiV1IamUserLogin200 => ({
    accessToken: faker.word.sample(),
    ...overrideResponse,
});

export const getPostApiV1IamUserMockHandler = (
    overrideResponse?:
        | PostApiV1IamUser201
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0],
          ) => Promise<PostApiV1IamUser201> | PostApiV1IamUser201),
) => {
    return http.post("*/api/v1/iam/user", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPostApiV1IamUserResponseMock(),
            ),
            { status: 201, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getGetApiV1IamUserMockHandler = (
    overrideResponse?:
        | GetApiV1IamUser200
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0],
          ) => Promise<GetApiV1IamUser200> | GetApiV1IamUser200),
) => {
    return http.get("*/api/v1/iam/user", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetApiV1IamUserResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getPatchApiV1IamUserUserIdMockHandler = (
    overrideResponse?:
        | PatchApiV1IamUserUserId200
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0],
          ) => Promise<PatchApiV1IamUserUserId200> | PatchApiV1IamUserUserId200),
) => {
    return http.patch("*/api/v1/iam/user/:userId", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPatchApiV1IamUserUserIdResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getDeleteApiV1IamUserUserIdMockHandler = (
    overrideResponse?:
        | void
        | ((
              info: Parameters<Parameters<typeof http.delete>[1]>[0],
          ) => Promise<void> | void),
) => {
    return http.delete("*/api/v1/iam/user/:userId", async (info) => {
        await delay(1000);
        if (typeof overrideResponse === "function") {
            await overrideResponse(info);
        }
        return new HttpResponse(null, { status: 204 });
    });
};

export const getGetApiV1IamUserUserIdMockHandler = (
    overrideResponse?:
        | GetApiV1IamUserUserId200
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0],
          ) => Promise<GetApiV1IamUserUserId200> | GetApiV1IamUserUserId200),
) => {
    return http.get("*/api/v1/iam/user/:userId", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetApiV1IamUserUserIdResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getGetApiV1IamUserExistsMockHandler = (
    overrideResponse?:
        | GetApiV1IamUserExists200
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0],
          ) => Promise<GetApiV1IamUserExists200> | GetApiV1IamUserExists200),
) => {
    return http.get("*/api/v1/iam/user/exists", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetApiV1IamUserExistsResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getPostApiV1IamUserLoginMockHandler = (
    overrideResponse?:
        | PostApiV1IamUserLogin200
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0],
          ) => Promise<PostApiV1IamUserLogin200> | PostApiV1IamUserLogin200),
) => {
    return http.post("*/api/v1/iam/user/login", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPostApiV1IamUserLoginResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};
export const getIamUserMock = () => [
    getPostApiV1IamUserMockHandler(),
    getGetApiV1IamUserMockHandler(),
    getPatchApiV1IamUserUserIdMockHandler(),
    getDeleteApiV1IamUserUserIdMockHandler(),
    getGetApiV1IamUserUserIdMockHandler(),
    getGetApiV1IamUserExistsMockHandler(),
    getPostApiV1IamUserLoginMockHandler(),
];
