/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Bones
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type {
    PostApiV1Workspace201,
    PostApiV1WorkspaceInitialize200,
} from "../../schemas";

export const getPostApiV1WorkspaceInitializeResponseMock = (
    overrideResponse: Partial<PostApiV1WorkspaceInitialize200> = {},
): PostApiV1WorkspaceInitialize200 => ({
    message: faker.word.sample(),
    ...overrideResponse,
});

export const getPostApiV1WorkspaceResponseMock = (
    overrideResponse: Partial<PostApiV1Workspace201> = {},
): PostApiV1Workspace201 => ({
    workspaceURL: faker.internet.url(),
    ...overrideResponse,
});

export const getPostApiV1WorkspaceInitializeMockHandler = (
    overrideResponse?:
        | PostApiV1WorkspaceInitialize200
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0],
          ) =>
              | Promise<PostApiV1WorkspaceInitialize200>
              | PostApiV1WorkspaceInitialize200),
) => {
    return http.post("*/api/v1/workspace/initialize", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPostApiV1WorkspaceInitializeResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getDeleteApiV1WorkspaceDeinitializeMockHandler = (
    overrideResponse?:
        | void
        | ((
              info: Parameters<Parameters<typeof http.delete>[1]>[0],
          ) => Promise<void> | void),
) => {
    return http.delete("*/api/v1/workspace/deinitialize", async (info) => {
        await delay(1000);
        if (typeof overrideResponse === "function") {
            await overrideResponse(info);
        }
        return new HttpResponse(null, { status: 204 });
    });
};

export const getPostApiV1WorkspaceMockHandler = (
    overrideResponse?:
        | PostApiV1Workspace201
        | ((
              info: Parameters<Parameters<typeof http.post>[1]>[0],
          ) => Promise<PostApiV1Workspace201> | PostApiV1Workspace201),
) => {
    return http.post("*/api/v1/workspace", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getPostApiV1WorkspaceResponseMock(),
            ),
            { status: 201, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getGetApiV1WorkspaceMockHandler = (
    overrideResponse?:
        | void
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0],
          ) => Promise<void> | void),
) => {
    return http.get("*/api/v1/workspace", async (info) => {
        await delay(1000);
        if (typeof overrideResponse === "function") {
            await overrideResponse(info);
        }
        return new HttpResponse(null, { status: 200 });
    });
};

export const getDeleteApiV1WorkspaceWorkspaceIdMockHandler = (
    overrideResponse?:
        | void
        | ((
              info: Parameters<Parameters<typeof http.delete>[1]>[0],
          ) => Promise<void> | void),
) => {
    return http.delete("*/api/v1/workspace/:workspaceId", async (info) => {
        await delay(1000);
        if (typeof overrideResponse === "function") {
            await overrideResponse(info);
        }
        return new HttpResponse(null, { status: 204 });
    });
};

export const getPatchApiV1WorkspaceWorkspaceIdMockHandler = (
    overrideResponse?:
        | void
        | ((
              info: Parameters<Parameters<typeof http.patch>[1]>[0],
          ) => Promise<void> | void),
) => {
    return http.patch("*/api/v1/workspace/:workspaceId", async (info) => {
        await delay(1000);
        if (typeof overrideResponse === "function") {
            await overrideResponse(info);
        }
        return new HttpResponse(null, { status: 200 });
    });
};

export const getGetApiV1WorkspaceWorkspaceIdMockHandler = (
    overrideResponse?:
        | void
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0],
          ) => Promise<void> | void),
) => {
    return http.get("*/api/v1/workspace/:workspaceId", async (info) => {
        await delay(1000);
        if (typeof overrideResponse === "function") {
            await overrideResponse(info);
        }
        return new HttpResponse(null, { status: 200 });
    });
};
export const getWorkspaceMock = () => [
    getPostApiV1WorkspaceInitializeMockHandler(),
    getDeleteApiV1WorkspaceDeinitializeMockHandler(),
    getPostApiV1WorkspaceMockHandler(),
    getGetApiV1WorkspaceMockHandler(),
    getDeleteApiV1WorkspaceWorkspaceIdMockHandler(),
    getPatchApiV1WorkspaceWorkspaceIdMockHandler(),
    getGetApiV1WorkspaceWorkspaceIdMockHandler(),
];
