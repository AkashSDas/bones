/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Bones
 * OpenAPI spec version: 1.0.0
 */
import { useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";

import type {
    GetApiV1IamLoginRefresh200,
    GetApiV1IamLoginRefresh401,
    GetApiV1IamLoginRefresh500,
    GetApiV1IamMe200,
    GetApiV1IamMe400,
    GetApiV1IamMe401,
    GetApiV1IamMe404,
    GetApiV1IamMe500,
} from "../../schemas";

export type getApiV1IamLoginRefreshResponse = {
    data: GetApiV1IamLoginRefresh200;
    status: number;
};

export const getGetApiV1IamLoginRefreshUrl = () => {
    return `/api/v1/iam/login/refresh`;
};

export const getApiV1IamLoginRefresh = async (
    options?: RequestInit,
): Promise<getApiV1IamLoginRefreshResponse> => {
    const res = await fetch(getGetApiV1IamLoginRefreshUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data };
};

export const getGetApiV1IamLoginRefreshQueryKey = () => {
    return [`/api/v1/iam/login/refresh`] as const;
};

export const getGetApiV1IamLoginRefreshQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    >;
    fetch?: RequestInit;
}) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiV1IamLoginRefreshQueryKey();

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>
    > = ({ signal }) => getApiV1IamLoginRefresh({ signal, ...fetchOptions });

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamLoginRefreshQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>
>;
export type GetApiV1IamLoginRefreshQueryError =
    | GetApiV1IamLoginRefresh401
    | GetApiV1IamLoginRefresh500;

export function useGetApiV1IamLoginRefresh<
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500,
>(options: {
    query: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    > &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
                TError,
                TData
            >,
            "initialData"
        >;
    fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamLoginRefresh<
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    > &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
                TError,
                TData
            >,
            "initialData"
        >;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamLoginRefresh<
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    >;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamLoginRefresh<
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    >;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamLoginRefreshQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export type getApiV1IamMeResponse = {
    data: GetApiV1IamMe200;
    status: number;
};

export const getGetApiV1IamMeUrl = () => {
    return `/api/v1/iam/me`;
};

export const getApiV1IamMe = async (
    options?: RequestInit,
): Promise<getApiV1IamMeResponse> => {
    const res = await fetch(getGetApiV1IamMeUrl(), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data };
};

export const getGetApiV1IamMeQueryKey = () => {
    return [`/api/v1/iam/me`] as const;
};

export const getGetApiV1IamMeQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    >;
    fetch?: RequestInit;
}) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiV1IamMeQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1IamMe>>> = ({
        signal,
    }) => getApiV1IamMe({ signal, ...fetchOptions });

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamMe>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamMeQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamMe>>
>;
export type GetApiV1IamMeQueryError =
    | GetApiV1IamMe400
    | GetApiV1IamMe401
    | GetApiV1IamMe404
    | GetApiV1IamMe500;

export function useGetApiV1IamMe<
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500,
>(options: {
    query: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    > &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof getApiV1IamMe>>,
                TError,
                TData
            >,
            "initialData"
        >;
    fetch?: RequestInit;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamMe<
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    > &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof getApiV1IamMe>>,
                TError,
                TData
            >,
            "initialData"
        >;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamMe<
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    >;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamMe<
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    >;
    fetch?: RequestInit;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamMeQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}
