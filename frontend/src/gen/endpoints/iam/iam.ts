/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Bones
 * OpenAPI spec version: 1.0.0
 */
import * as axios from "axios";
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
    GetApiV1IamLoginRefresh200,
    GetApiV1IamLoginRefresh401,
    GetApiV1IamLoginRefresh500,
    GetApiV1IamMe200,
    GetApiV1IamMe400,
    GetApiV1IamMe401,
    GetApiV1IamMe404,
    GetApiV1IamMe500,
    PostApiV1IamLogout401,
    PostApiV1IamLogout500,
} from "../../schemas";

export const getApiV1IamLoginRefresh = (
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1IamLoginRefresh200>> => {
    return axios.default.get(`http://localhost:8000/api/v1/iam/login/refresh`, options);
};

export const getGetApiV1IamLoginRefreshQueryKey = () => {
    return [`http://localhost:8000/api/v1/iam/login/refresh`] as const;
};

export const getGetApiV1IamLoginRefreshQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = AxiosError<GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiV1IamLoginRefreshQueryKey();

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>
    > = ({ signal }) => getApiV1IamLoginRefresh({ signal, ...axiosOptions });

    return { queryKey, queryFn, staleTime: 600000, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamLoginRefreshQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>
>;
export type GetApiV1IamLoginRefreshQueryError = AxiosError<
    GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500
>;

export function useGetApiV1IamLoginRefresh<
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = AxiosError<GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500>,
>(options: {
    query: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    > &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
                TError,
                TData
            >,
            "initialData"
        >;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamLoginRefresh<
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = AxiosError<GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    > &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
                TError,
                TData
            >,
            "initialData"
        >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamLoginRefresh<
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = AxiosError<GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamLoginRefresh<
    TData = Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
    TError = AxiosError<GetApiV1IamLoginRefresh401 | GetApiV1IamLoginRefresh500>,
>(options?: {
    query?: Partial<
        UseQueryOptions<
            Awaited<ReturnType<typeof getApiV1IamLoginRefresh>>,
            TError,
            TData
        >
    >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamLoginRefreshQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getApiV1IamMe = (
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1IamMe200>> => {
    return axios.default.get(`http://localhost:8000/api/v1/iam/me`, options);
};

export const getGetApiV1IamMeQueryKey = () => {
    return [`http://localhost:8000/api/v1/iam/me`] as const;
};

export const getGetApiV1IamMeQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = AxiosError<
        GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
}) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey = queryOptions?.queryKey ?? getGetApiV1IamMeQueryKey();

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiV1IamMe>>> = ({
        signal,
    }) => getApiV1IamMe({ signal, ...axiosOptions });

    return { queryKey, queryFn, staleTime: 600000, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamMe>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamMeQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamMe>>
>;
export type GetApiV1IamMeQueryError = AxiosError<
    GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500
>;

export function useGetApiV1IamMe<
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = AxiosError<
        GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500
    >,
>(options: {
    query: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    > &
        Pick<
            DefinedInitialDataOptions<
                Awaited<ReturnType<typeof getApiV1IamMe>>,
                TError,
                TData
            >,
            "initialData"
        >;
    axios?: AxiosRequestConfig;
}): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamMe<
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = AxiosError<
        GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    > &
        Pick<
            UndefinedInitialDataOptions<
                Awaited<ReturnType<typeof getApiV1IamMe>>,
                TError,
                TData
            >,
            "initialData"
        >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamMe<
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = AxiosError<
        GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamMe<
    TData = Awaited<ReturnType<typeof getApiV1IamMe>>,
    TError = AxiosError<
        GetApiV1IamMe400 | GetApiV1IamMe401 | GetApiV1IamMe404 | GetApiV1IamMe500
    >,
>(options?: {
    query?: Partial<
        UseQueryOptions<Awaited<ReturnType<typeof getApiV1IamMe>>, TError, TData>
    >;
    axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamMeQueryOptions(options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiV1IamLogout = (
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<void>> => {
    return axios.default.post(
        `http://localhost:8000/api/v1/iam/logout`,
        undefined,
        options,
    );
};

export const getPostApiV1IamLogoutMutationOptions = <
    TError = AxiosError<PostApiV1IamLogout401 | PostApiV1IamLogout500>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamLogout>>,
        TError,
        void,
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IamLogout>>,
    TError,
    void,
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiV1IamLogout>>,
        void
    > = () => {
        return postApiV1IamLogout(axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiV1IamLogoutMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiV1IamLogout>>
>;

export type PostApiV1IamLogoutMutationError = AxiosError<
    PostApiV1IamLogout401 | PostApiV1IamLogout500
>;

export const usePostApiV1IamLogout = <
    TError = AxiosError<PostApiV1IamLogout401 | PostApiV1IamLogout500>,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamLogout>>,
        TError,
        void,
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiV1IamLogout>>,
    TError,
    void,
    TContext
> => {
    const mutationOptions = getPostApiV1IamLogoutMutationOptions(options);

    return useMutation(mutationOptions);
};
