/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Bones
 * OpenAPI spec version: 1.0.0
 */
import { faker } from "@faker-js/faker";
import { HttpResponse, delay, http } from "msw";

import type { GetApiV1IamLoginRefresh200, GetApiV1IamMe200 } from "../../schemas";

export const getGetApiV1IamLoginRefreshResponseMock = (
    overrideResponse: Partial<GetApiV1IamLoginRefresh200> = {},
): GetApiV1IamLoginRefresh200 => ({
    accessToken: faker.word.sample(),
    ...overrideResponse,
});

export const getGetApiV1IamMeResponseMock = (
    overrideResponse: Partial<GetApiV1IamMe200> = {},
): GetApiV1IamMe200 => ({
    account: {
        accountId: faker.string.uuid(),
        accountName: faker.word.sample(),
        createdAt: faker.word.sample(),
        email: faker.word.sample(),
        isVerified: faker.datatype.boolean(),
        lastLoggedInAt: faker.word.sample(),
        lastVerifiedAt: faker.helpers.arrayElement([faker.word.sample(), null]),
        passwordAge: faker.word.sample(),
        status: faker.helpers.arrayElement([
            "uninitialized",
            "active",
            "suspended",
            "deactive",
        ] as const),
        updatedAt: faker.word.sample(),
    },
    roles: faker.helpers.arrayElements(["admin", "user"] as const),
    user: faker.helpers.arrayElement([
        {
            createdAt: faker.word.sample(),
            isBlocked: faker.datatype.boolean(),
            lastLoggedInAt: faker.word.sample(),
            passwordAge: faker.word.sample(),
            updatedAt: faker.word.sample(),
            userId: faker.string.uuid(),
            username: faker.word.sample(),
        },
        undefined,
    ]),
    ...overrideResponse,
});

export const getGetApiV1IamLoginRefreshMockHandler = (
    overrideResponse?:
        | GetApiV1IamLoginRefresh200
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0],
          ) => Promise<GetApiV1IamLoginRefresh200> | GetApiV1IamLoginRefresh200),
) => {
    return http.get("*/api/v1/iam/login/refresh", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetApiV1IamLoginRefreshResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};

export const getGetApiV1IamMeMockHandler = (
    overrideResponse?:
        | GetApiV1IamMe200
        | ((
              info: Parameters<Parameters<typeof http.get>[1]>[0],
          ) => Promise<GetApiV1IamMe200> | GetApiV1IamMe200),
) => {
    return http.get("*/api/v1/iam/me", async (info) => {
        await delay(1000);

        return new HttpResponse(
            JSON.stringify(
                overrideResponse !== undefined
                    ? typeof overrideResponse === "function"
                        ? await overrideResponse(info)
                        : overrideResponse
                    : getGetApiV1IamMeResponseMock(),
            ),
            { status: 200, headers: { "Content-Type": "application/json" } },
        );
    });
};
export const getIamMock = () => [
    getGetApiV1IamLoginRefreshMockHandler(),
    getGetApiV1IamMeMockHandler(),
];
