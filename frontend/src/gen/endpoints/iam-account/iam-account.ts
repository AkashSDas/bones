/**
 * Generated by orval v7.2.0 üç∫
 * Do not edit manually.
 * Bones
 * OpenAPI spec version: 1.0.0
 */
import * as axios from "axios";
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";
import type { AxiosError, AxiosRequestConfig, AxiosResponse } from "axios";

import type {
    GetApiV1IamAccountActivateActivationToken200,
    GetApiV1IamAccountActivateActivationToken400,
    GetApiV1IamAccountActivateActivationToken500,
    GetApiV1IamAccountActivateActivationTokenParams,
    GetApiV1IamAccountExists200,
    GetApiV1IamAccountExists400,
    GetApiV1IamAccountExists500,
    GetApiV1IamAccountExistsParams,
    PostApiV1IamAccount201,
    PostApiV1IamAccount400,
    PostApiV1IamAccount409,
    PostApiV1IamAccount500,
    PostApiV1IamAccountBody,
    PostApiV1IamAccountLogin200,
    PostApiV1IamAccountLogin400,
    PostApiV1IamAccountLogin404,
    PostApiV1IamAccountLogin500,
    PostApiV1IamAccountLoginBody,
    PostApiV1IamAccountResetPassword200,
    PostApiV1IamAccountResetPassword400,
    PostApiV1IamAccountResetPassword404,
    PostApiV1IamAccountResetPassword500,
    PostApiV1IamAccountResetPasswordBody,
    PostApiV1IamAccountResetPasswordResetToken200,
    PostApiV1IamAccountResetPasswordResetToken400,
    PostApiV1IamAccountResetPasswordResetToken500,
    PostApiV1IamAccountResetPasswordResetTokenBody,
} from "../../schemas";

export const postApiV1IamAccount = (
    postApiV1IamAccountBody: PostApiV1IamAccountBody,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostApiV1IamAccount201>> => {
    return axios.default.post(
        `http://localhost:5050/api/v1/iam/account`,
        postApiV1IamAccountBody,
        options,
    );
};

export const getPostApiV1IamAccountMutationOptions = <
    TError = AxiosError<
        PostApiV1IamAccount400 | PostApiV1IamAccount409 | PostApiV1IamAccount500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccount>>,
        TError,
        { data: PostApiV1IamAccountBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IamAccount>>,
    TError,
    { data: PostApiV1IamAccountBody },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiV1IamAccount>>,
        { data: PostApiV1IamAccountBody }
    > = (props) => {
        const { data } = props ?? {};

        return postApiV1IamAccount(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiV1IamAccountMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiV1IamAccount>>
>;
export type PostApiV1IamAccountMutationBody = PostApiV1IamAccountBody;
export type PostApiV1IamAccountMutationError = AxiosError<
    PostApiV1IamAccount400 | PostApiV1IamAccount409 | PostApiV1IamAccount500
>;

export const usePostApiV1IamAccount = <
    TError = AxiosError<
        PostApiV1IamAccount400 | PostApiV1IamAccount409 | PostApiV1IamAccount500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccount>>,
        TError,
        { data: PostApiV1IamAccountBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiV1IamAccount>>,
    TError,
    { data: PostApiV1IamAccountBody },
    TContext
> => {
    const mutationOptions = getPostApiV1IamAccountMutationOptions(options);

    return useMutation(mutationOptions);
};
export const getApiV1IamAccountActivateActivationToken = (
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1IamAccountActivateActivationToken200>> => {
    return axios.default.get(
        `http://localhost:5050/api/v1/iam/account/activate/${activationToken}`,
        {
            ...options,
            params: { ...params, ...options?.params },
        },
    );
};

export const getGetApiV1IamAccountActivateActivationTokenQueryKey = (
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
) => {
    return [
        `http://localhost:5050/api/v1/iam/account/activate/${activationToken}`,
        ...(params ? [params] : []),
    ] as const;
};

export const getGetApiV1IamAccountActivateActivationTokenQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError = AxiosError<
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500
    >,
>(
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiV1IamAccountActivateActivationTokenQueryKey(activationToken, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>
    > = ({ signal }) =>
        getApiV1IamAccountActivateActivationToken(activationToken, params, {
            signal,
            ...axiosOptions,
        });

    return {
        queryKey,
        queryFn,
        enabled: !!activationToken,
        staleTime: 600000,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamAccountActivateActivationTokenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>
>;
export type GetApiV1IamAccountActivateActivationTokenQueryError = AxiosError<
    | void
    | GetApiV1IamAccountActivateActivationToken400
    | GetApiV1IamAccountActivateActivationToken500
>;

export function useGetApiV1IamAccountActivateActivationToken<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError = AxiosError<
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500
    >,
>(
    activationToken: string,
    params: undefined | GetApiV1IamAccountActivateActivationTokenParams,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<
                        ReturnType<typeof getApiV1IamAccountActivateActivationToken>
                    >,
                    TError,
                    TData
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamAccountActivateActivationToken<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError = AxiosError<
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500
    >,
>(
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<
                        ReturnType<typeof getApiV1IamAccountActivateActivationToken>
                    >,
                    TError,
                    TData
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamAccountActivateActivationToken<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError = AxiosError<
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500
    >,
>(
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamAccountActivateActivationToken<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError = AxiosError<
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500
    >,
>(
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamAccountActivateActivationTokenQueryOptions(
        activationToken,
        params,
        options,
    );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const getApiV1IamAccountExists = (
    params?: GetApiV1IamAccountExistsParams,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<GetApiV1IamAccountExists200>> => {
    return axios.default.get(`http://localhost:5050/api/v1/iam/account/exists`, {
        ...options,
        params: { ...params, ...options?.params },
    });
};

export const getGetApiV1IamAccountExistsQueryKey = (
    params?: GetApiV1IamAccountExistsParams,
) => {
    return [
        `http://localhost:5050/api/v1/iam/account/exists`,
        ...(params ? [params] : []),
    ] as const;
};

export const getGetApiV1IamAccountExistsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = AxiosError<GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500>,
>(
    params?: GetApiV1IamAccountExistsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
) => {
    const { query: queryOptions, axios: axiosOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiV1IamAccountExistsQueryKey(params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiV1IamAccountExists>>
    > = ({ signal }) => getApiV1IamAccountExists(params, { signal, ...axiosOptions });

    return { queryKey, queryFn, staleTime: 600000, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamAccountExistsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamAccountExists>>
>;
export type GetApiV1IamAccountExistsQueryError = AxiosError<
    GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500
>;

export function useGetApiV1IamAccountExists<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = AxiosError<GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500>,
>(
    params: undefined | GetApiV1IamAccountExistsParams,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                    TError,
                    TData
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamAccountExists<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = AxiosError<GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500>,
>(
    params?: GetApiV1IamAccountExistsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                    TError,
                    TData
                >,
                "initialData"
            >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamAccountExists<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = AxiosError<GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500>,
>(
    params?: GetApiV1IamAccountExistsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamAccountExists<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = AxiosError<GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500>,
>(
    params?: GetApiV1IamAccountExistsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        >;
        axios?: AxiosRequestConfig;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamAccountExistsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export const postApiV1IamAccountLogin = (
    postApiV1IamAccountLoginBody: PostApiV1IamAccountLoginBody,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostApiV1IamAccountLogin200>> => {
    return axios.default.post(
        `http://localhost:5050/api/v1/iam/account/login`,
        postApiV1IamAccountLoginBody,
        options,
    );
};

export const getPostApiV1IamAccountLoginMutationOptions = <
    TError = AxiosError<
        | PostApiV1IamAccountLogin400
        | PostApiV1IamAccountLogin404
        | PostApiV1IamAccountLogin500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
        TError,
        { data: PostApiV1IamAccountLoginBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
    TError,
    { data: PostApiV1IamAccountLoginBody },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
        { data: PostApiV1IamAccountLoginBody }
    > = (props) => {
        const { data } = props ?? {};

        return postApiV1IamAccountLogin(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiV1IamAccountLoginMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiV1IamAccountLogin>>
>;
export type PostApiV1IamAccountLoginMutationBody = PostApiV1IamAccountLoginBody;
export type PostApiV1IamAccountLoginMutationError = AxiosError<
    | PostApiV1IamAccountLogin400
    | PostApiV1IamAccountLogin404
    | PostApiV1IamAccountLogin500
>;

export const usePostApiV1IamAccountLogin = <
    TError = AxiosError<
        | PostApiV1IamAccountLogin400
        | PostApiV1IamAccountLogin404
        | PostApiV1IamAccountLogin500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
        TError,
        { data: PostApiV1IamAccountLoginBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
    TError,
    { data: PostApiV1IamAccountLoginBody },
    TContext
> => {
    const mutationOptions = getPostApiV1IamAccountLoginMutationOptions(options);

    return useMutation(mutationOptions);
};
export const postApiV1IamAccountResetPassword = (
    postApiV1IamAccountResetPasswordBody: PostApiV1IamAccountResetPasswordBody,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostApiV1IamAccountResetPassword200>> => {
    return axios.default.post(
        `http://localhost:5050/api/v1/iam/account/reset-password`,
        postApiV1IamAccountResetPasswordBody,
        options,
    );
};

export const getPostApiV1IamAccountResetPasswordMutationOptions = <
    TError = AxiosError<
        | PostApiV1IamAccountResetPassword400
        | PostApiV1IamAccountResetPassword404
        | PostApiV1IamAccountResetPassword500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
        TError,
        { data: PostApiV1IamAccountResetPasswordBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
    TError,
    { data: PostApiV1IamAccountResetPasswordBody },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
        { data: PostApiV1IamAccountResetPasswordBody }
    > = (props) => {
        const { data } = props ?? {};

        return postApiV1IamAccountResetPassword(data, axiosOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiV1IamAccountResetPasswordMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>
>;
export type PostApiV1IamAccountResetPasswordMutationBody =
    PostApiV1IamAccountResetPasswordBody;
export type PostApiV1IamAccountResetPasswordMutationError = AxiosError<
    | PostApiV1IamAccountResetPassword400
    | PostApiV1IamAccountResetPassword404
    | PostApiV1IamAccountResetPassword500
>;

export const usePostApiV1IamAccountResetPassword = <
    TError = AxiosError<
        | PostApiV1IamAccountResetPassword400
        | PostApiV1IamAccountResetPassword404
        | PostApiV1IamAccountResetPassword500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
        TError,
        { data: PostApiV1IamAccountResetPasswordBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
    TError,
    { data: PostApiV1IamAccountResetPasswordBody },
    TContext
> => {
    const mutationOptions = getPostApiV1IamAccountResetPasswordMutationOptions(options);

    return useMutation(mutationOptions);
};
export const postApiV1IamAccountResetPasswordResetToken = (
    resetToken: string,
    postApiV1IamAccountResetPasswordResetTokenBody: PostApiV1IamAccountResetPasswordResetTokenBody,
    options?: AxiosRequestConfig,
): Promise<AxiosResponse<PostApiV1IamAccountResetPasswordResetToken200>> => {
    return axios.default.post(
        `http://localhost:5050/api/v1/iam/account/reset-password/${resetToken}`,
        postApiV1IamAccountResetPasswordResetTokenBody,
        options,
    );
};

export const getPostApiV1IamAccountResetPasswordResetTokenMutationOptions = <
    TError = AxiosError<
        | PostApiV1IamAccountResetPasswordResetToken400
        | PostApiV1IamAccountResetPasswordResetToken500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
        TError,
        { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
    TError,
    { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody },
    TContext
> => {
    const { mutation: mutationOptions, axios: axiosOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
        { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody }
    > = (props) => {
        const { resetToken, data } = props ?? {};

        return postApiV1IamAccountResetPasswordResetToken(
            resetToken,
            data,
            axiosOptions,
        );
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiV1IamAccountResetPasswordResetTokenMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>
>;
export type PostApiV1IamAccountResetPasswordResetTokenMutationBody =
    PostApiV1IamAccountResetPasswordResetTokenBody;
export type PostApiV1IamAccountResetPasswordResetTokenMutationError = AxiosError<
    | PostApiV1IamAccountResetPasswordResetToken400
    | PostApiV1IamAccountResetPasswordResetToken500
>;

export const usePostApiV1IamAccountResetPasswordResetToken = <
    TError = AxiosError<
        | PostApiV1IamAccountResetPasswordResetToken400
        | PostApiV1IamAccountResetPasswordResetToken500
    >,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
        TError,
        { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody },
        TContext
    >;
    axios?: AxiosRequestConfig;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
    TError,
    { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody },
    TContext
> => {
    const mutationOptions =
        getPostApiV1IamAccountResetPasswordResetTokenMutationOptions(options);

    return useMutation(mutationOptions);
};
