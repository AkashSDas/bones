/**
 * Generated by orval v7.2.0 🍺
 * Do not edit manually.
 * Bones
 * OpenAPI spec version: 1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
    DefinedInitialDataOptions,
    DefinedUseQueryResult,
    MutationFunction,
    QueryFunction,
    QueryKey,
    UndefinedInitialDataOptions,
    UseMutationOptions,
    UseMutationResult,
    UseQueryOptions,
    UseQueryResult,
} from "@tanstack/react-query";

import type {
    GetApiV1IamAccountActivateActivationToken200,
    GetApiV1IamAccountActivateActivationToken400,
    GetApiV1IamAccountActivateActivationToken500,
    GetApiV1IamAccountActivateActivationTokenParams,
    GetApiV1IamAccountExists200,
    GetApiV1IamAccountExists400,
    GetApiV1IamAccountExists500,
    GetApiV1IamAccountExistsParams,
    PostApiV1IamAccount201,
    PostApiV1IamAccount400,
    PostApiV1IamAccount409,
    PostApiV1IamAccount500,
    PostApiV1IamAccountBody,
    PostApiV1IamAccountLogin200,
    PostApiV1IamAccountLogin400,
    PostApiV1IamAccountLogin404,
    PostApiV1IamAccountLogin500,
    PostApiV1IamAccountLoginBody,
    PostApiV1IamAccountResetPassword200,
    PostApiV1IamAccountResetPassword400,
    PostApiV1IamAccountResetPassword500,
    PostApiV1IamAccountResetPasswordBody,
    PostApiV1IamAccountResetPasswordResetToken200,
    PostApiV1IamAccountResetPasswordResetToken400,
    PostApiV1IamAccountResetPasswordResetToken500,
    PostApiV1IamAccountResetPasswordResetTokenBody,
} from "../../schemas";

export type postApiV1IamAccountResponse = {
    data: PostApiV1IamAccount201;
    status: number;
};

export const getPostApiV1IamAccountUrl = () => {
    return `/api/v1/iam/account`;
};

export const postApiV1IamAccount = async (
    postApiV1IamAccountBody: PostApiV1IamAccountBody,
    options?: RequestInit,
): Promise<postApiV1IamAccountResponse> => {
    const res = await fetch(getPostApiV1IamAccountUrl(), {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(postApiV1IamAccountBody),
    });
    const data = await res.json();

    return { status: res.status, data };
};

export const getPostApiV1IamAccountMutationOptions = <
    TError = PostApiV1IamAccount400 | PostApiV1IamAccount409 | PostApiV1IamAccount500,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccount>>,
        TError,
        { data: PostApiV1IamAccountBody },
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IamAccount>>,
    TError,
    { data: PostApiV1IamAccountBody },
    TContext
> => {
    const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiV1IamAccount>>,
        { data: PostApiV1IamAccountBody }
    > = (props) => {
        const { data } = props ?? {};

        return postApiV1IamAccount(data, fetchOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiV1IamAccountMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiV1IamAccount>>
>;
export type PostApiV1IamAccountMutationBody = PostApiV1IamAccountBody;
export type PostApiV1IamAccountMutationError =
    | PostApiV1IamAccount400
    | PostApiV1IamAccount409
    | PostApiV1IamAccount500;

export const usePostApiV1IamAccount = <
    TError = PostApiV1IamAccount400 | PostApiV1IamAccount409 | PostApiV1IamAccount500,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccount>>,
        TError,
        { data: PostApiV1IamAccountBody },
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiV1IamAccount>>,
    TError,
    { data: PostApiV1IamAccountBody },
    TContext
> => {
    const mutationOptions = getPostApiV1IamAccountMutationOptions(options);

    return useMutation(mutationOptions);
};
export type getApiV1IamAccountActivateActivationTokenResponse = {
    data: GetApiV1IamAccountActivateActivationToken200;
    status: number;
};

export const getGetApiV1IamAccountActivateActivationTokenUrl = (
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
) => {
    const normalizedParams = new URLSearchParams();

    Object.entries(params || {}).forEach(([key, value]) => {
        if (value !== undefined) {
            normalizedParams.append(key, value === null ? "null" : value.toString());
        }
    });

    return normalizedParams.size
        ? `/api/v1/iam/account/activate/${activationToken}?${normalizedParams.toString()}`
        : `/api/v1/iam/account/activate/${activationToken}`;
};

export const getApiV1IamAccountActivateActivationToken = async (
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: RequestInit,
): Promise<getApiV1IamAccountActivateActivationTokenResponse> => {
    const res = await fetch(
        getGetApiV1IamAccountActivateActivationTokenUrl(activationToken, params),
        {
            ...options,
            method: "GET",
        },
    );
    const data = await res.json();

    return { status: res.status, data };
};

export const getGetApiV1IamAccountActivateActivationTokenQueryKey = (
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
) => {
    return [
        `/api/v1/iam/account/activate/${activationToken}`,
        ...(params ? [params] : []),
    ] as const;
};

export const getGetApiV1IamAccountActivateActivationTokenQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError =
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500,
>(
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        >;
        fetch?: RequestInit;
    },
) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetApiV1IamAccountActivateActivationTokenQueryKey(activationToken, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>
    > = ({ signal }) =>
        getApiV1IamAccountActivateActivationToken(activationToken, params, {
            signal,
            ...fetchOptions,
        });

    return {
        queryKey,
        queryFn,
        enabled: !!activationToken,
        staleTime: 10000,
        ...queryOptions,
    } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamAccountActivateActivationTokenQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>
>;
export type GetApiV1IamAccountActivateActivationTokenQueryError =
    | void
    | GetApiV1IamAccountActivateActivationToken400
    | GetApiV1IamAccountActivateActivationToken500;

export function useGetApiV1IamAccountActivateActivationToken<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError =
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500,
>(
    activationToken: string,
    params: undefined | GetApiV1IamAccountActivateActivationTokenParams,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<
                        ReturnType<typeof getApiV1IamAccountActivateActivationToken>
                    >,
                    TError,
                    TData
                >,
                "initialData"
            >;
        fetch?: RequestInit;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamAccountActivateActivationToken<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError =
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500,
>(
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<
                        ReturnType<typeof getApiV1IamAccountActivateActivationToken>
                    >,
                    TError,
                    TData
                >,
                "initialData"
            >;
        fetch?: RequestInit;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamAccountActivateActivationToken<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError =
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500,
>(
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        >;
        fetch?: RequestInit;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamAccountActivateActivationToken<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
    TError =
        | void
        | GetApiV1IamAccountActivateActivationToken400
        | GetApiV1IamAccountActivateActivationToken500,
>(
    activationToken: string,
    params?: GetApiV1IamAccountActivateActivationTokenParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountActivateActivationToken>>,
                TError,
                TData
            >
        >;
        fetch?: RequestInit;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamAccountActivateActivationTokenQueryOptions(
        activationToken,
        params,
        options,
    );

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export type getApiV1IamAccountExistsResponse = {
    data: GetApiV1IamAccountExists200;
    status: number;
};

export const getGetApiV1IamAccountExistsUrl = (
    params?: GetApiV1IamAccountExistsParams,
) => {
    const normalizedParams = new URLSearchParams();

    Object.entries(params || {}).forEach(([key, value]) => {
        if (value !== undefined) {
            normalizedParams.append(key, value === null ? "null" : value.toString());
        }
    });

    return normalizedParams.size
        ? `/api/v1/iam/account/exists?${normalizedParams.toString()}`
        : `/api/v1/iam/account/exists`;
};

export const getApiV1IamAccountExists = async (
    params?: GetApiV1IamAccountExistsParams,
    options?: RequestInit,
): Promise<getApiV1IamAccountExistsResponse> => {
    const res = await fetch(getGetApiV1IamAccountExistsUrl(params), {
        ...options,
        method: "GET",
    });
    const data = await res.json();

    return { status: res.status, data };
};

export const getGetApiV1IamAccountExistsQueryKey = (
    params?: GetApiV1IamAccountExistsParams,
) => {
    return [`/api/v1/iam/account/exists`, ...(params ? [params] : [])] as const;
};

export const getGetApiV1IamAccountExistsQueryOptions = <
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500,
>(
    params?: GetApiV1IamAccountExistsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        >;
        fetch?: RequestInit;
    },
) => {
    const { query: queryOptions, fetch: fetchOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetApiV1IamAccountExistsQueryKey(params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getApiV1IamAccountExists>>
    > = ({ signal }) => getApiV1IamAccountExists(params, { signal, ...fetchOptions });

    return { queryKey, queryFn, staleTime: 10000, ...queryOptions } as UseQueryOptions<
        Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
        TError,
        TData
    > & { queryKey: QueryKey };
};

export type GetApiV1IamAccountExistsQueryResult = NonNullable<
    Awaited<ReturnType<typeof getApiV1IamAccountExists>>
>;
export type GetApiV1IamAccountExistsQueryError =
    | GetApiV1IamAccountExists400
    | GetApiV1IamAccountExists500;

export function useGetApiV1IamAccountExists<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500,
>(
    params: undefined | GetApiV1IamAccountExistsParams,
    options: {
        query: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        > &
            Pick<
                DefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                    TError,
                    TData
                >,
                "initialData"
            >;
        fetch?: RequestInit;
    },
): DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamAccountExists<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500,
>(
    params?: GetApiV1IamAccountExistsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        > &
            Pick<
                UndefinedInitialDataOptions<
                    Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                    TError,
                    TData
                >,
                "initialData"
            >;
        fetch?: RequestInit;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };
export function useGetApiV1IamAccountExists<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500,
>(
    params?: GetApiV1IamAccountExistsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        >;
        fetch?: RequestInit;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey };

export function useGetApiV1IamAccountExists<
    TData = Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
    TError = GetApiV1IamAccountExists400 | GetApiV1IamAccountExists500,
>(
    params?: GetApiV1IamAccountExistsParams,
    options?: {
        query?: Partial<
            UseQueryOptions<
                Awaited<ReturnType<typeof getApiV1IamAccountExists>>,
                TError,
                TData
            >
        >;
        fetch?: RequestInit;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } {
    const queryOptions = getGetApiV1IamAccountExistsQueryOptions(params, options);

    const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
        queryKey: QueryKey;
    };

    query.queryKey = queryOptions.queryKey;

    return query;
}

export type postApiV1IamAccountLoginResponse = {
    data: PostApiV1IamAccountLogin200;
    status: number;
};

export const getPostApiV1IamAccountLoginUrl = () => {
    return `/api/v1/iam/account/login`;
};

export const postApiV1IamAccountLogin = async (
    postApiV1IamAccountLoginBody: PostApiV1IamAccountLoginBody,
    options?: RequestInit,
): Promise<postApiV1IamAccountLoginResponse> => {
    const res = await fetch(getPostApiV1IamAccountLoginUrl(), {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(postApiV1IamAccountLoginBody),
    });
    const data = await res.json();

    return { status: res.status, data };
};

export const getPostApiV1IamAccountLoginMutationOptions = <
    TError =
        | PostApiV1IamAccountLogin400
        | PostApiV1IamAccountLogin404
        | PostApiV1IamAccountLogin500,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
        TError,
        { data: PostApiV1IamAccountLoginBody },
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
    TError,
    { data: PostApiV1IamAccountLoginBody },
    TContext
> => {
    const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
        { data: PostApiV1IamAccountLoginBody }
    > = (props) => {
        const { data } = props ?? {};

        return postApiV1IamAccountLogin(data, fetchOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiV1IamAccountLoginMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiV1IamAccountLogin>>
>;
export type PostApiV1IamAccountLoginMutationBody = PostApiV1IamAccountLoginBody;
export type PostApiV1IamAccountLoginMutationError =
    | PostApiV1IamAccountLogin400
    | PostApiV1IamAccountLogin404
    | PostApiV1IamAccountLogin500;

export const usePostApiV1IamAccountLogin = <
    TError =
        | PostApiV1IamAccountLogin400
        | PostApiV1IamAccountLogin404
        | PostApiV1IamAccountLogin500,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
        TError,
        { data: PostApiV1IamAccountLoginBody },
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiV1IamAccountLogin>>,
    TError,
    { data: PostApiV1IamAccountLoginBody },
    TContext
> => {
    const mutationOptions = getPostApiV1IamAccountLoginMutationOptions(options);

    return useMutation(mutationOptions);
};
export type postApiV1IamAccountResetPasswordResponse = {
    data: PostApiV1IamAccountResetPassword200;
    status: number;
};

export const getPostApiV1IamAccountResetPasswordUrl = () => {
    return `/api/v1/iam/account/reset-password`;
};

export const postApiV1IamAccountResetPassword = async (
    postApiV1IamAccountResetPasswordBody: PostApiV1IamAccountResetPasswordBody,
    options?: RequestInit,
): Promise<postApiV1IamAccountResetPasswordResponse> => {
    const res = await fetch(getPostApiV1IamAccountResetPasswordUrl(), {
        ...options,
        method: "POST",
        headers: { "Content-Type": "application/json", ...options?.headers },
        body: JSON.stringify(postApiV1IamAccountResetPasswordBody),
    });
    const data = await res.json();

    return { status: res.status, data };
};

export const getPostApiV1IamAccountResetPasswordMutationOptions = <
    TError = PostApiV1IamAccountResetPassword400 | PostApiV1IamAccountResetPassword500,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
        TError,
        { data: PostApiV1IamAccountResetPasswordBody },
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
    TError,
    { data: PostApiV1IamAccountResetPasswordBody },
    TContext
> => {
    const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
        { data: PostApiV1IamAccountResetPasswordBody }
    > = (props) => {
        const { data } = props ?? {};

        return postApiV1IamAccountResetPassword(data, fetchOptions);
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiV1IamAccountResetPasswordMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>
>;
export type PostApiV1IamAccountResetPasswordMutationBody =
    PostApiV1IamAccountResetPasswordBody;
export type PostApiV1IamAccountResetPasswordMutationError =
    | PostApiV1IamAccountResetPassword400
    | PostApiV1IamAccountResetPassword500;

export const usePostApiV1IamAccountResetPassword = <
    TError = PostApiV1IamAccountResetPassword400 | PostApiV1IamAccountResetPassword500,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
        TError,
        { data: PostApiV1IamAccountResetPasswordBody },
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPassword>>,
    TError,
    { data: PostApiV1IamAccountResetPasswordBody },
    TContext
> => {
    const mutationOptions = getPostApiV1IamAccountResetPasswordMutationOptions(options);

    return useMutation(mutationOptions);
};
export type postApiV1IamAccountResetPasswordResetTokenResponse = {
    data: PostApiV1IamAccountResetPasswordResetToken200;
    status: number;
};

export const getPostApiV1IamAccountResetPasswordResetTokenUrl = (
    resetToken: string,
) => {
    return `/api/v1/iam/account/reset-password/${resetToken}`;
};

export const postApiV1IamAccountResetPasswordResetToken = async (
    resetToken: string,
    postApiV1IamAccountResetPasswordResetTokenBody: PostApiV1IamAccountResetPasswordResetTokenBody,
    options?: RequestInit,
): Promise<postApiV1IamAccountResetPasswordResetTokenResponse> => {
    const res = await fetch(
        getPostApiV1IamAccountResetPasswordResetTokenUrl(resetToken),
        {
            ...options,
            method: "POST",
            headers: { "Content-Type": "application/json", ...options?.headers },
            body: JSON.stringify(postApiV1IamAccountResetPasswordResetTokenBody),
        },
    );
    const data = await res.json();

    return { status: res.status, data };
};

export const getPostApiV1IamAccountResetPasswordResetTokenMutationOptions = <
    TError =
        | PostApiV1IamAccountResetPasswordResetToken400
        | PostApiV1IamAccountResetPasswordResetToken500,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
        TError,
        { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody },
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationOptions<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
    TError,
    { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody },
    TContext
> => {
    const { mutation: mutationOptions, fetch: fetchOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
        { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody }
    > = (props) => {
        const { resetToken, data } = props ?? {};

        return postApiV1IamAccountResetPasswordResetToken(
            resetToken,
            data,
            fetchOptions,
        );
    };

    return { mutationFn, ...mutationOptions };
};

export type PostApiV1IamAccountResetPasswordResetTokenMutationResult = NonNullable<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>
>;
export type PostApiV1IamAccountResetPasswordResetTokenMutationBody =
    PostApiV1IamAccountResetPasswordResetTokenBody;
export type PostApiV1IamAccountResetPasswordResetTokenMutationError =
    | PostApiV1IamAccountResetPasswordResetToken400
    | PostApiV1IamAccountResetPasswordResetToken500;

export const usePostApiV1IamAccountResetPasswordResetToken = <
    TError =
        | PostApiV1IamAccountResetPasswordResetToken400
        | PostApiV1IamAccountResetPasswordResetToken500,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
        TError,
        { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody },
        TContext
    >;
    fetch?: RequestInit;
}): UseMutationResult<
    Awaited<ReturnType<typeof postApiV1IamAccountResetPasswordResetToken>>,
    TError,
    { resetToken: string; data: PostApiV1IamAccountResetPasswordResetTokenBody },
    TContext
> => {
    const mutationOptions =
        getPostApiV1IamAccountResetPasswordResetTokenMutationOptions(options);

    return useMutation(mutationOptions);
};
